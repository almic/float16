{
  "version": 3,
  "sources": [
    "test/dataView.js"
  ],
  "names": [
    "_PowerAssertRecorder1",
    "PowerAssertRecorder",
    "captured",
    "prototype",
    "_capt",
    "value",
    "espath",
    "push",
    "_expr",
    "source",
    "capturedValues",
    "powerAssertContext",
    "events",
    "buffer",
    "ArrayBuffer",
    "dataView",
    "DataView",
    "clear",
    "Uint16Array",
    "realmDataView",
    "require",
    "runInNewContext",
    "iframe",
    "document",
    "createElement",
    "height",
    "width",
    "body",
    "appendChild",
    "iframeDocument",
    "contentDocument",
    "write",
    "contentWindow",
    "close",
    "describe",
    "beforeEach",
    "it",
    "_rec1",
    "assert",
    "getFloat16",
    "name",
    "content",
    "filepath",
    "line",
    "_rec2",
    "length",
    "doesNotThrow",
    "throws",
    "TypeError",
    "_rec3",
    "_rec4",
    "setUint16",
    "_rec5",
    "setFloat16",
    "_rec6",
    "_rec7",
    "_rec8",
    "getUint16"
  ],
  "mappings": "AAAA,IAAAA,qBAAA;AAAA,aAAAC,mBAAA;AAAA,aAAAC,QAAA;AAAA;AAAA,IAAAD,mBAAA,CAAAE,SAAA,CAAAC,KAAA,YAAAA,KAAA,CAAAC,KAAA,EAAAC,MAAA;AAAA,aAAAJ,QAAA,CAAAK,IAAA;AAAA,YAAAF,KAAA,EAAAA,KAAA;AAAA,YAAAC,MAAA,EAAAA,MAAA;AAAA;AAAA,eAAAD,KAAA;AAAA;AAAA,IAAAJ,mBAAA,CAAAE,SAAA,CAAAK,KAAA,YAAAA,KAAA,CAAAH,KAAA,EAAAI,MAAA;AAAA,YAAAC,cAAA,QAAAR,QAAA;AAAA,aAAAA,QAAA;AAAA;AAAA,YAAAS,kBAAA;AAAA,gBAAAN,KAAA,EAAAA,KAAA;AAAA,gBAAAO,MAAA,EAAAF,cAAA;AAAA;AAAA,YAAAD,MAAA,EAAAA,MAAA;AAAA;AAAA;AAAA,WAAAR,mBAAA;AAAA;AAGA,CAAC,YAAY;AAAA,IAEb,MAAMY,MAAA,GAAS,IAAIC,WAAJ,CAAgB,CAAhB,CAAf,CAFa;AAAA,IAGb,MAAMC,QAAA,GAAW,IAAIC,QAAJ,CAAaH,MAAb,CAAjB,CAHa;AAAA,IAKb,SAASI,KAAT,GAAiB;AAAA,QACb,IAAIC,WAAJ,CAAgBL,MAAhB,EAAwB,CAAxB,IAA6B,CAA7B,CADa;AAAA,KALJ;AAAA,IASb,IAAIM,aAAJ,CATa;AAAA,IAWb,IAAI,OAAOC,OAAP,KAAmB,WAAvB,EAAoC;AAAA,QAChCD,aAAA,GAAgBC,OAAA,CAAQ,IAAR,EAAcC,eAAd,CAA8B,CAAC;AAAA;AAAA;AAAA,IAAD,CAA9B,CAAhB,CADgC;AAAA,KAApC,MAKO;AAAA,QACH,MAAMC,MAAA,GAASC,QAAA,CAASC,aAAT,CAAuB,QAAvB,CAAf,CADG;AAAA,QAEHF,MAAA,CAAOG,MAAP,GAAgBH,MAAA,CAAOI,KAAP,GAAe,CAA/B,CAFG;AAAA,QAGHH,QAAA,CAASI,IAAT,CAAcC,WAAd,CAA0BN,MAA1B,EAHG;AAAA,QAKH,MAAMO,cAAA,GAAiBP,MAAA,CAAOQ,eAA9B,CALG;AAAA,QAMHD,cAAA,CAAeE,KAAf,CAAqB,CAAC;AAAA;AAAA;AAAA,aAAD,CAArB,EANG;AAAA,QAUHZ,aAAA,GAAgBG,MAAA,CAAOU,aAAP,CAAqBb,aAArC,CAVG;AAAA,QAYHU,cAAA,CAAeI,KAAf,GAZG;AAAA,KAhBM;AAAA,IA+BbC,QAAA,CAAS,6BAAT,EAAwC,MAAM;AAAA,QAE1CA,QAAA,CAAS,cAAT,EAAyB,MAAM;AAAA,YAE3BC,UAAA,CAAYlB,KAAZ,EAF2B;AAAA,YAI3BmB,EAAA,CAAG,mCAAH,EAAsC,MAAM;AAAA,gBAChC,IAAAC,KAAA,OAAArC,qBAAA,GADgC;AAAA,gBACxCsC,MAAA,CAAQD,KAAA,CAAA7B,KAAA,CAAA6B,KAAA,CAAAjC,KAAA,CAAAiC,KAAA,CAAAjC,KAAA,CAAAiC,KAAA,CAAAjC,KAAA,CAAAmC,UAAA,6BAAWC,IAAX,0BAAoB,YAApB;AAAA,oBAAAC,OAAA;AAAA,oBAAAC,QAAA;AAAA,oBAAAC,IAAA;AAAA,kBAAR,EADwC;AAAA,aAA5C,EAJ2B;AAAA,YAQ3BP,EAAA,CAAG,wBAAH,EAA6B,MAAM;AAAA,gBACvB,IAAAQ,KAAA,OAAA5C,qBAAA,GADuB;AAAA,gBAC/BsC,MAAA,CAAQM,KAAA,CAAApC,KAAA,CAAAoC,KAAA,CAAAxC,KAAA,CAAAwC,KAAA,CAAAxC,KAAA,CAAAwC,KAAA,CAAAxC,KAAA,CAAAmC,UAAA,6BAAWM,MAAX,0BAAsB,CAAtB;AAAA,oBAAAJ,OAAA;AAAA,oBAAAC,QAAA;AAAA,oBAAAC,IAAA;AAAA,kBAAR,EAD+B;AAAA,aAAnC,EAR2B;AAAA,YAY3BP,EAAA,CAAG,0CAAH,EAA+C,MAAM;AAAA,gBACjDE,MAAA,CAAOQ,YAAP,CAAoB,MAAMP,UAAA,CAAWxB,QAAX,EAAqB,CAArB,CAA1B,EADiD;AAAA,gBAGjDuB,MAAA,CAAOS,MAAP,CAAc,MAAMR,UAAA,CAAW,IAAX,EAAiB,CAAjB,CAApB,EAAyCS,SAAzC,EAHiD;AAAA,gBAIjDV,MAAA,CAAOS,MAAP,CAAc,MAAMR,UAAA,CAAW,IAAX,EAAiB,CAAjB,CAApB,EAAyCS,SAAzC,EAJiD;AAAA,gBAKjDV,MAAA,CAAOS,MAAP,CAAc,MAAMR,UAAA,CAAW,MAAX,EAAmB,CAAnB,CAApB,EAA2CS,SAA3C,EALiD;AAAA,gBAMjDV,MAAA,CAAOS,MAAP,CAAc,MAAMR,UAAA,CAAW,EAAX,EAAe,CAAf,CAApB,EAAuCS,SAAvC,EANiD;AAAA,gBAOjDV,MAAA,CAAOS,MAAP,CAAc,MAAMR,UAAA,CAAW,EAAX,EAAe,CAAf,CAApB,EAAuCS,SAAvC,EAPiD;AAAA,gBAQjDV,MAAA,CAAOS,MAAP,CAAc,MAAMR,UAAA,CAAW,MAAM;AAAA,iBAAjB,EAAqB,CAArB,CAApB,EAA6CS,SAA7C,EARiD;AAAA,aAArD,EAZ2B;AAAA,YAuB3BZ,EAAA,CAAG,gDAAH,EAAqD,MAAM;AAAA,gBAE/C,IAAAa,KAAA,OAAAjD,qBAAA,GAF+C;AAAA,gBAK/C,IAAAkD,KAAA,OAAAlD,qBAAA,GAL+C;AAAA,gBACvDe,QAAA,CAASoC,SAAT,CAAmB,CAAnB,EAAsB,IAAtB,EADuD;AAAA,gBAEvDb,MAAA,CAAQW,KAAA,CAAAzC,KAAA,CAAAyC,KAAA,CAAA7C,KAAA,CAAA6C,KAAA,CAAA7C,KAAA,CAAAmC,UAAA,CAAAU,KAAW,CAAA7C,KAAA,CAAAW,QAAA,iCAAX,EAAqB,CAArB,2BAA4B,qBAA5B;AAAA,oBAAA0B,OAAA;AAAA,oBAAAC,QAAA;AAAA,oBAAAC,IAAA;AAAA,kBAAR,EAFuD;AAAA,gBAIvD5B,QAAA,CAASoC,SAAT,CAAmB,CAAnB,EAAsB,IAAtB,EAA8B,IAA9B,EAJuD;AAAA,gBAKvDb,MAAA,CAAQY,KAAA,CAAA1C,KAAA,CAAA0C,KAAA,CAAA9C,KAAA,CAAA8C,KAAA,CAAA9C,KAAA,CAAAmC,UAAA,CAAAW,KAAW,CAAA9C,KAAA,CAAAW,QAAA,iCAAX,EAAqB,CAArB,EAAwB,IAAxB,2BAAkC,qBAAlC;AAAA,oBAAA0B,OAAA;AAAA,oBAAAC,QAAA;AAAA,oBAAAC,IAAA;AAAA,kBAAR,EALuD;AAAA,aAA3D,EAvB2B;AAAA,YA+B3BP,EAAA,CAAG,uCAAH,EAA4C,MAAM;AAAA,gBAC9CE,MAAA,CAAOQ,YAAP,CAAoB,MAAMP,UAAA,CAAWpB,aAAX,EAA0B,CAA1B,CAA1B,EAD8C;AAAA,aAAlD,EA/B2B;AAAA,SAA/B,EAF0C;AAAA,QAuC1Ce,QAAA,CAAS,cAAT,EAAyB,MAAM;AAAA,YAE3BC,UAAA,CAAYlB,KAAZ,EAF2B;AAAA,YAI3BmB,EAAA,CAAG,mCAAH,EAAsC,MAAM;AAAA,gBAChC,IAAAgB,KAAA,OAAApD,qBAAA,GADgC;AAAA,gBACxCsC,MAAA,CAAQc,KAAA,CAAA5C,KAAA,CAAA4C,KAAA,CAAAhD,KAAA,CAAAgD,KAAA,CAAAhD,KAAA,CAAAgD,KAAA,CAAAhD,KAAA,CAAAiD,UAAA,6BAAWb,IAAX,0BAAoB,YAApB;AAAA,oBAAAC,OAAA;AAAA,oBAAAC,QAAA;AAAA,oBAAAC,IAAA;AAAA,kBAAR,EADwC;AAAA,aAA5C,EAJ2B;AAAA,YAQ3BP,EAAA,CAAG,wBAAH,EAA6B,MAAM;AAAA,gBACvB,IAAAkB,KAAA,OAAAtD,qBAAA,GADuB;AAAA,gBAC/BsC,MAAA,CAAQgB,KAAA,CAAA9C,KAAA,CAAA8C,KAAA,CAAAlD,KAAA,CAAAkD,KAAA,CAAAlD,KAAA,CAAAkD,KAAA,CAAAlD,KAAA,CAAAiD,UAAA,6BAAWR,MAAX,0BAAsB,CAAtB;AAAA,oBAAAJ,OAAA;AAAA,oBAAAC,QAAA;AAAA,oBAAAC,IAAA;AAAA,kBAAR,EAD+B;AAAA,aAAnC,EAR2B;AAAA,YAY3BP,EAAA,CAAG,0CAAH,EAA+C,MAAM;AAAA,gBACjDE,MAAA,CAAOQ,YAAP,CAAoB,MAAMO,UAAA,CAAWtC,QAAX,EAAqB,CAArB,EAAwB,CAAxB,CAA1B,EADiD;AAAA,gBAGjDuB,MAAA,CAAOS,MAAP,CAAc,MAAMM,UAAA,CAAW,IAAX,EAAiB,CAAjB,EAAoB,CAApB,CAApB,EAA4CL,SAA5C,EAHiD;AAAA,gBAIjDV,MAAA,CAAOS,MAAP,CAAc,MAAMM,UAAA,CAAW,IAAX,EAAiB,CAAjB,EAAoB,CAApB,CAApB,EAA4CL,SAA5C,EAJiD;AAAA,gBAKjDV,MAAA,CAAOS,MAAP,CAAc,MAAMM,UAAA,CAAW,MAAX,EAAmB,CAAnB,EAAsB,CAAtB,CAApB,EAA8CL,SAA9C,EALiD;AAAA,gBAMjDV,MAAA,CAAOS,MAAP,CAAc,MAAMM,UAAA,CAAW,EAAX,EAAe,CAAf,EAAkB,CAAlB,CAApB,EAA0CL,SAA1C,EANiD;AAAA,gBAOjDV,MAAA,CAAOS,MAAP,CAAc,MAAMM,UAAA,CAAW,EAAX,EAAe,CAAf,EAAkB,CAAlB,CAApB,EAA0CL,SAA1C,EAPiD;AAAA,gBAQjDV,MAAA,CAAOS,MAAP,CAAc,MAAMM,UAAA,CAAW,MAAM;AAAA,iBAAjB,EAAqB,CAArB,EAAwB,CAAxB,CAApB,EAAgDL,SAAhD,EARiD;AAAA,aAArD,EAZ2B;AAAA,YAuB3BZ,EAAA,CAAG,gDAAH,EAAqD,MAAM;AAAA,gBAE/C,IAAAmB,KAAA,OAAAvD,qBAAA,GAF+C;AAAA,gBAK/C,IAAAwD,KAAA,OAAAxD,qBAAA,GAL+C;AAAA,gBACvDqD,UAAA,CAAWtC,QAAX,EAAqB,CAArB,EAAwB,qBAAxB,EADuD;AAAA,gBAEvDuB,MAAA,CAAQiB,KAAA,CAAA/C,KAAA,CAAA+C,KAAA,CAAAnD,KAAA,CAAAmD,KAAA,CAAAnD,KAAA,CAAAmD,KAAA,CAAAnD,KAAA,CAAAW,QAAA,oCAAS0C,SAAT,CAAmB,CAAnB,2BAA0B,IAA1B;AAAA,oBAAAhB,OAAA;AAAA,oBAAAC,QAAA;AAAA,oBAAAC,IAAA;AAAA,kBAAR,EAFuD;AAAA,gBAIvDU,UAAA,CAAWtC,QAAX,EAAqB,CAArB,EAAwB,qBAAxB,EAA+C,IAA/C,EAJuD;AAAA,gBAKvDuB,MAAA,CAAQkB,KAAA,CAAAhD,KAAA,CAAAgD,KAAA,CAAApD,KAAA,CAAAoD,KAAA,CAAApD,KAAA,CAAAoD,KAAA,CAAApD,KAAA,CAAAW,QAAA,oCAAS0C,SAAT,CAAmB,CAAnB,EAAsB,IAAtB,2BAAgC,IAAhC;AAAA,oBAAAhB,OAAA;AAAA,oBAAAC,QAAA;AAAA,oBAAAC,IAAA;AAAA,kBAAR,EALuD;AAAA,aAA3D,EAvB2B;AAAA,YA+B3BP,EAAA,CAAG,uCAAH,EAA4C,MAAM;AAAA,gBAC9CE,MAAA,CAAOQ,YAAP,CAAoB,MAAMO,UAAA,CAAWlC,aAAX,EAA0B,CAA1B,EAA6B,CAA7B,CAA1B,EAD8C;AAAA,aAAlD,EA/B2B;AAAA,SAA/B,EAvC0C;AAAA,KAA9C,EA/Ba;AAAA,CAAb",
  "sourceRoot": "./",
  "sourcesContent": [
    "/* eslint-env mocha */\n/* global assert getFloat16 setFloat16 */\n\n(function () {\n\nconst buffer = new ArrayBuffer(2);\nconst dataView = new DataView(buffer);\n\nfunction clear() {\n    new Uint16Array(buffer)[0] = 0;\n}\n\nlet realmDataView;\n\nif (typeof require !== \"undefined\") {\n    realmDataView = require(\"vm\").runInNewContext(`\n        const buffer = new ArrayBuffer(2);\n        new DataView(buffer);\n    `);\n} else {\n    const iframe = document.createElement(\"iframe\");\n    iframe.height = iframe.width = 0;\n    document.body.appendChild(iframe);\n\n    const iframeDocument = iframe.contentDocument;\n    iframeDocument.write(`<script>\n        const buffer = new ArrayBuffer(2);\n        window.realmDataView = new DataView(buffer);\n    </script>`);\n    realmDataView = iframe.contentWindow.realmDataView;\n\n    iframeDocument.close();\n}\n\ndescribe(\"additional DataView methods\", () => {\n\n    describe(\"getFloat16()\", () => {\n\n        beforeEach( clear );\n\n        it(\"property `name` is 'getFloat16'\", () => {\n            assert( getFloat16.name === \"getFloat16\" );\n        });\n\n        it(\"property `length` is 2\", () => {\n            assert( getFloat16.length === 2 );\n        });\n\n        it(\"first argument must be DataView instance\", () => {\n            assert.doesNotThrow(() => getFloat16(dataView, 0));\n\n            assert.throws(() => getFloat16(null, 0), TypeError);\n            assert.throws(() => getFloat16(3.14, 0), TypeError);\n            assert.throws(() => getFloat16(\"test\", 0), TypeError);\n            assert.throws(() => getFloat16({}, 0), TypeError);\n            assert.throws(() => getFloat16([], 0), TypeError);\n            assert.throws(() => getFloat16(() => {}, 0), TypeError);\n        });\n\n        it(\"get 0.0007572174072265625 by big/little endian\", () => {\n            dataView.setUint16(0, 0x1234);\n            assert( getFloat16(dataView, 0) === 0.0007572174072265625 );\n\n            dataView.setUint16(0, 0x1234, true);\n            assert( getFloat16(dataView, 0, true) === 0.0007572174072265625 );\n        });\n\n        it(\"work with DataView from anothor realm\", () => {\n            assert.doesNotThrow(() => getFloat16(realmDataView, 0));\n        });\n\n    });\n\n    describe(\"setFloat16()\", () => {\n\n        beforeEach( clear );\n\n        it(\"property `name` is 'setFloat16'\", () => {\n            assert( setFloat16.name === \"setFloat16\" );\n        });\n\n        it(\"property `length` is 3\", () => {\n            assert( setFloat16.length === 3 );\n        });\n\n        it(\"first argument must be DataView instance\", () => {\n            assert.doesNotThrow(() => setFloat16(dataView, 0, 0));\n\n            assert.throws(() => setFloat16(null, 0, 0), TypeError);\n            assert.throws(() => setFloat16(3.14, 0, 0), TypeError);\n            assert.throws(() => setFloat16(\"test\", 0, 0), TypeError);\n            assert.throws(() => setFloat16({}, 0, 0), TypeError);\n            assert.throws(() => setFloat16([], 0, 0), TypeError);\n            assert.throws(() => setFloat16(() => {}, 0, 0), TypeError);\n        });\n\n        it(\"set 0.0007572174072265625 by big/little endian\", () => {\n            setFloat16(dataView, 0, 0.0007572174072265625);\n            assert( dataView.getUint16(0) === 0x1234 );\n\n            setFloat16(dataView, 0, 0.0007572174072265625, true);\n            assert( dataView.getUint16(0, true) === 0x1234 );\n        });\n\n        it(\"work with DataView from anothor realm\", () => {\n            assert.doesNotThrow(() => setFloat16(realmDataView, 0, 0));\n        });\n\n    });\n\n});\n\n})();\n"
  ]
}