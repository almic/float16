{
  "version": 3,
  "sources": [
    "test/hfround.js"
  ],
  "names": [
    "_PowerAssertRecorder1",
    "PowerAssertRecorder",
    "captured",
    "prototype",
    "_capt",
    "value",
    "espath",
    "push",
    "_expr",
    "source",
    "capturedValues",
    "powerAssertContext",
    "events",
    "maxFloat16",
    "minFloat16",
    "describe",
    "it",
    "_rec1",
    "assert",
    "hfround",
    "name",
    "content",
    "filepath",
    "line",
    "_rec2",
    "length",
    "_rec3",
    "_rec4",
    "_rec5",
    "Number",
    "isNaN",
    "undefined",
    "NaN",
    "_rec6",
    "_rec7",
    "Object",
    "is",
    "_rec8",
    "_rec9",
    "_rec10",
    "Infinity",
    "_rec11",
    "_rec12",
    "MAX_VALUE",
    "_rec13",
    "_rec14",
    "MIN_VALUE",
    "_rec15",
    "_rec16",
    "_rec17",
    "_rec18",
    "_rec19",
    "_rec20",
    "_rec21",
    "_rec22",
    "_rec23",
    "_rec24"
  ],
  "mappings": "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",
  "sourceRoot": "./",
  "sourcesContent": [
    "/* eslint-env mocha */\n/* global assert hfround */\n\n(function () {\n\nconst maxFloat16 = 65504;\nconst minFloat16 = 2 ** -24;\n\ndescribe(\"hfround()\", () => {\n\n    it(\"property `name` is 'hfround'\", () => {\n        assert( hfround.name === \"hfround\" );\n    });\n\n    it(\"property `length` is 1\", () => {\n        assert( hfround.length === 1 );\n    });\n\n    it(\"return NaN when value is empty or undefined or NaN\", () => {\n        assert( Number.isNaN( hfround() ) );\n        assert( Number.isNaN( hfround(undefined) ) );\n        assert( Number.isNaN( hfround(NaN) ) );\n    });\n\n    it(\"return 0 when value is 0 or null\", () => {\n        assert( Object.is( hfround(0), 0 ) );\n        assert( Object.is( hfround(null), 0 ) );\n    });\n\n    it(\"return -0 when value is -0\", () => {\n        assert( Object.is( hfround(-0), -0 ) );\n    });\n\n    it(\"return ±Infinity when value is ±Infinity\", () => {\n        assert( hfround(Infinity) === Infinity );\n        assert( hfround(-Infinity) === -Infinity );\n    });\n\n    it(\"return ±Infinity when value is ±Number.MAX_VALUE\", () => {\n        assert( hfround(Number.MAX_VALUE) === Infinity );\n        assert( hfround(-Number.MAX_VALUE) === -Infinity );\n    });\n\n    it(\"return ±0 when value is ±Number.MIN_VALUE\", () => {\n        assert( Object.is( hfround(Number.MIN_VALUE), 0 ) );\n        assert( Object.is( hfround(-Number.MIN_VALUE), -0 ) );\n    });\n\n    it(\"return same value when value is ±float16 max/min value\", () => {\n        assert( hfround(maxFloat16) === maxFloat16 );\n        assert( hfround(-maxFloat16) === -maxFloat16 );\n        assert( hfround(minFloat16) === minFloat16 );\n        assert( hfround(-minFloat16) === -minFloat16 );\n    });\n\n    it(\"return same value when value is float16 max value + a bit number\", () => {\n        assert( hfround(maxFloat16 + 2 ** (2 ** (5 - 1) - 1 - 10 - 2)) === maxFloat16 );\n    });\n\n    it(\"return 0 when value is ±float16 min value / 2\", () => {\n        assert( Object.is( hfround(minFloat16 / 2), 0 ) );\n        assert( Object.is( hfround(-minFloat16 / 2), -0 ) );\n    });\n\n    it(\"return ±float16 min value when value is ±float16 min value / 2 ± a bit number\", () => {\n        assert( hfround(minFloat16 / 2 + 2 ** -25) === minFloat16 );\n        assert( hfround(-minFloat16 / 2 - 2 ** -25) === -minFloat16 );\n    });\n\n    it(\"return 1.3369140625 when value is 1.337\", () => {\n        assert( hfround(1.337) === 1.3369140625 );\n    });\n});\n\n})();\n"
  ]
}