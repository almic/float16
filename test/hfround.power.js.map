{
  "version": 3,
  "sources": [
    "test/hfround.js"
  ],
  "names": [
    "_PowerAssertRecorder1",
    "PowerAssertRecorder",
    "captured",
    "prototype",
    "_capt",
    "value",
    "espath",
    "push",
    "_expr",
    "source",
    "capturedValues",
    "powerAssertContext",
    "events",
    "describe",
    "maxFloat16",
    "minFloat16",
    "it",
    "_rec1",
    "assert",
    "hfround",
    "name",
    "content",
    "filepath",
    "line",
    "_rec2",
    "length",
    "_rec3",
    "_rec4",
    "_rec5",
    "Number",
    "isNaN",
    "undefined",
    "NaN",
    "_rec6",
    "_rec7",
    "Object",
    "is",
    "_rec8",
    "_rec9",
    "_rec10",
    "Infinity",
    "_rec11",
    "_rec12",
    "MAX_VALUE",
    "_rec13",
    "_rec14",
    "MIN_VALUE",
    "_rec15",
    "_rec16",
    "_rec17",
    "_rec18",
    "_rec19",
    "_rec20",
    "_rec21",
    "_rec22",
    "_rec23",
    "BigInt",
    "skip",
    "throws",
    "TypeError"
  ],
  "mappings": "AAAA,IAAAA,qBAAA;AAAA,aAAAC,mBAAA;AAAA,aAAAC,QAAA;AAAA;AAAA,IAAAD,mBAAA,CAAAE,SAAA,CAAAC,KAAA,YAAAA,KAAA,CAAAC,KAAA,EAAAC,MAAA;AAAA,aAAAJ,QAAA,CAAAK,IAAA;AAAA,YAAAF,KAAA,EAAAA,KAAA;AAAA,YAAAC,MAAA,EAAAA,MAAA;AAAA;AAAA,eAAAD,KAAA;AAAA;AAAA,IAAAJ,mBAAA,CAAAE,SAAA,CAAAK,KAAA,YAAAA,KAAA,CAAAH,KAAA,EAAAI,MAAA;AAAA,YAAAC,cAAA,QAAAR,QAAA;AAAA,aAAAA,QAAA;AAAA;AAAA,YAAAS,kBAAA;AAAA,gBAAAN,KAAA,EAAAA,KAAA;AAAA,gBAAAO,MAAA,EAAAF,cAAA;AAAA;AAAA,YAAAD,MAAA,EAAAA,MAAA;AAAA;AAAA;AAAA,WAAAR,mBAAA;AAAA;AAGAY,QAAA,CAAS,WAAT,EAAsB,MAAM;AAAA,IAE1B,MAAMC,UAAA,GAAa,KAAnB,CAF0B;AAAA,IAG1B,MAAMC,UAAA,GAAa,KAAK,CAAC,EAAzB,CAH0B;AAAA,IAK1BC,EAAA,CAAG,gCAAH,EAAmC,MAAM;AAAA,QAC/B,IAAAC,KAAA,OAAAjB,qBAAA,GAD+B;AAAA,QACvCkB,MAAA,CAAQD,KAAA,CAAAT,KAAA,CAAAS,KAAA,CAAAb,KAAA,CAAAa,KAAA,CAAAb,KAAA,CAAAa,KAAA,CAAAb,KAAA,CAAAe,OAAA,6BAAQC,IAAR,0BAAiB,SAAjB;AAAA,YAAAC,OAAA;AAAA,YAAAC,QAAA;AAAA,YAAAC,IAAA;AAAA,UAAR,EADuC;AAAA,KAAzC,EAL0B;AAAA,IAS1BP,EAAA,CAAG,wBAAH,EAA6B,MAAM;AAAA,QACzB,IAAAQ,KAAA,OAAAxB,qBAAA,GADyB;AAAA,QACjCkB,MAAA,CAAQM,KAAA,CAAAhB,KAAA,CAAAgB,KAAA,CAAApB,KAAA,CAAAoB,KAAA,CAAApB,KAAA,CAAAoB,KAAA,CAAApB,KAAA,CAAAe,OAAA,6BAAQM,MAAR,0BAAmB,CAAnB;AAAA,YAAAJ,OAAA;AAAA,YAAAC,QAAA;AAAA,YAAAC,IAAA;AAAA,UAAR,EADiC;AAAA,KAAnC,EAT0B;AAAA,IAa1BP,EAAA,CAAG,oDAAH,EAAyD,MAAM;AAAA,QACrD,IAAAU,KAAA,OAAA1B,qBAAA,GADqD;AAAA,QAErD,IAAA2B,KAAA,OAAA3B,qBAAA,GAFqD;AAAA,QAGrD,IAAA4B,KAAA,OAAA5B,qBAAA,GAHqD;AAAA,QAC7DkB,MAAA,CAAQQ,KAAA,CAAAlB,KAAA,CAAAkB,KAAA,CAAAtB,KAAA,CAAAsB,KAAA,CAAAtB,KAAA,CAAAyB,MAAA,+BAAOC,KAAP,CAAAJ,KAAc,CAAAtB,KAAA,CAAAe,OAAA,8BAAd;AAAA,YAAAE,OAAA;AAAA,YAAAC,QAAA;AAAA,YAAAC,IAAA;AAAA,UAAR,EAD6D;AAAA,QAE7DL,MAAA,CAAQS,KAAA,CAAAnB,KAAA,CAAAmB,KAAA,CAAAvB,KAAA,CAAAuB,KAAA,CAAAvB,KAAA,CAAAyB,MAAA,+BAAOC,KAAP,CAAAH,KAAc,CAAAvB,KAAA,CAAAe,OAAA,CAAdQ,KAAsB,CAAAvB,KAAA,CAAA2B,SAAA,wCAAR,6BAAd;AAAA,YAAAV,OAAA;AAAA,YAAAC,QAAA;AAAA,YAAAC,IAAA;AAAA,UAAR,EAF6D;AAAA,QAG7DL,MAAA,CAAQU,KAAA,CAAApB,KAAA,CAAAoB,KAAA,CAAAxB,KAAA,CAAAwB,KAAA,CAAAxB,KAAA,CAAAyB,MAAA,+BAAOC,KAAP,CAAAF,KAAc,CAAAxB,KAAA,CAAAe,OAAA,CAAdS,KAAsB,CAAAxB,KAAA,CAAA4B,GAAA,wCAAR,6BAAd;AAAA,YAAAX,OAAA;AAAA,YAAAC,QAAA;AAAA,YAAAC,IAAA;AAAA,UAAR,EAH6D;AAAA,KAA/D,EAb0B;AAAA,IAmB1BP,EAAA,CAAG,kCAAH,EAAuC,MAAM;AAAA,QACnC,IAAAiB,KAAA,OAAAjC,qBAAA,GADmC;AAAA,QAEnC,IAAAkC,KAAA,OAAAlC,qBAAA,GAFmC;AAAA,QAC3CkB,MAAA,CAAQe,KAAA,CAAAzB,KAAA,CAAAyB,KAAA,CAAA7B,KAAA,CAAA6B,KAAA,CAAA7B,KAAA,CAAA+B,MAAA,+BAAOC,EAAP,CAAAH,KAAW,CAAA7B,KAAA,CAAAe,OAAA,CAAQ,CAAR,6BAAX,EAAuB,CAAvB;AAAA,YAAAE,OAAA;AAAA,YAAAC,QAAA;AAAA,YAAAC,IAAA;AAAA,UAAR,EAD2C;AAAA,QAE3CL,MAAA,CAAQgB,KAAA,CAAA1B,KAAA,CAAA0B,KAAA,CAAA9B,KAAA,CAAA8B,KAAA,CAAA9B,KAAA,CAAA+B,MAAA,+BAAOC,EAAP,CAAAF,KAAW,CAAA9B,KAAA,CAAAe,OAAA,CAAQ,IAAR,6BAAX,EAA0B,CAA1B;AAAA,YAAAE,OAAA;AAAA,YAAAC,QAAA;AAAA,YAAAC,IAAA;AAAA,UAAR,EAF2C;AAAA,KAA7C,EAnB0B;AAAA,IAwB1BP,EAAA,CAAG,4BAAH,EAAiC,MAAM;AAAA,QAC7B,IAAAqB,KAAA,OAAArC,qBAAA,GAD6B;AAAA,QACrCkB,MAAA,CAAQmB,KAAA,CAAA7B,KAAA,CAAA6B,KAAA,CAAAjC,KAAA,CAAAiC,KAAA,CAAAjC,KAAA,CAAA+B,MAAA,+BAAOC,EAAP,CAAAC,KAAW,CAAAjC,KAAA,CAAAe,OAAA,CAAXkB,KAAmB,CAAAjC,KAAA,EAAC,CAAD,wCAAR,6BAAX,EAAAiC,KAAwB,CAAAjC,KAAA,EAAC,CAAD,4BAAxB;AAAA,YAAAiB,OAAA;AAAA,YAAAC,QAAA;AAAA,YAAAC,IAAA;AAAA,UAAR,EADqC;AAAA,KAAvC,EAxB0B;AAAA,IA4B1BP,EAAA,CAAG,gDAAH,EAA+C,MAAM;AAAA,QAC3C,IAAAsB,KAAA,OAAAtC,qBAAA,GAD2C;AAAA,QAE3C,IAAAuC,MAAA,OAAAvC,qBAAA,GAF2C;AAAA,QACnDkB,MAAA,CAAQoB,KAAA,CAAA9B,KAAA,CAAA8B,KAAA,CAAAlC,KAAA,CAAAkC,KAAA,CAAAlC,KAAA,CAAAe,OAAA,CAAAmB,KAAQ,CAAAlC,KAAA,CAAAoC,QAAA,iCAAR,2BAAAF,KAAsB,CAAAlC,KAAA,CAAAoC,QAAA,sBAAtB;AAAA,YAAAnB,OAAA;AAAA,YAAAC,QAAA;AAAA,YAAAC,IAAA;AAAA,UAAR,EADmD;AAAA,QAEnDL,MAAA,CAAQqB,MAAA,CAAA/B,KAAA,CAAA+B,MAAA,CAAAnC,KAAA,CAAAmC,MAAA,CAAAnC,KAAA,CAAAe,OAAA,CAAAoB,MAAQ,CAAAnC,KAAA,EAARmC,MAAS,CAAAnC,KAAA,CAAAoC,QAAA,0CAAD,iCAAR,2BAAAD,MAAuB,CAAAnC,KAAA,EAAvBmC,MAAwB,CAAAnC,KAAA,CAAAoC,QAAA,+BAAD,sBAAvB;AAAA,YAAAnB,OAAA;AAAA,YAAAC,QAAA;AAAA,YAAAC,IAAA;AAAA,UAAR,EAFmD;AAAA,KAArD,EA5B0B;AAAA,IAiC1BP,EAAA,CAAG,wDAAH,EAAuD,MAAM;AAAA,QACnD,IAAAyB,MAAA,OAAAzC,qBAAA,GADmD;AAAA,QAEnD,IAAA0C,MAAA,OAAA1C,qBAAA,GAFmD;AAAA,QAC3DkB,MAAA,CAAQuB,MAAA,CAAAjC,KAAA,CAAAiC,MAAA,CAAArC,KAAA,CAAAqC,MAAA,CAAArC,KAAA,CAAAe,OAAA,CAAAsB,MAAQ,CAAArC,KAAA,CAARqC,MAAQ,CAAArC,KAAA,CAAAyB,MAAA,yCAAOc,SAAP,iCAAR,2BAAAF,MAA8B,CAAArC,KAAA,CAAAoC,QAAA,sBAA9B;AAAA,YAAAnB,OAAA;AAAA,YAAAC,QAAA;AAAA,YAAAC,IAAA;AAAA,UAAR,EAD2D;AAAA,QAE3DL,MAAA,CAAQwB,MAAA,CAAAlC,KAAA,CAAAkC,MAAA,CAAAtC,KAAA,CAAAsC,MAAA,CAAAtC,KAAA,CAAAe,OAAA,CAAAuB,MAAQ,CAAAtC,KAAA,EAARsC,MAAS,CAAAtC,KAAA,CAATsC,MAAS,CAAAtC,KAAA,CAAAyB,MAAA,kDAAOc,SAAP,0CAAD,iCAAR,2BAAAD,MAA+B,CAAAtC,KAAA,EAA/BsC,MAAgC,CAAAtC,KAAA,CAAAoC,QAAA,+BAAD,sBAA/B;AAAA,YAAAnB,OAAA;AAAA,YAAAC,QAAA;AAAA,YAAAC,IAAA;AAAA,UAAR,EAF2D;AAAA,KAA7D,EAjC0B;AAAA,IAsC1BP,EAAA,CAAG,iDAAH,EAAgD,MAAM;AAAA,QAC5C,IAAA4B,MAAA,OAAA5C,qBAAA,GAD4C;AAAA,QAE5C,IAAA6C,MAAA,OAAA7C,qBAAA,GAF4C;AAAA,QACpDkB,MAAA,CAAQ0B,MAAA,CAAApC,KAAA,CAAAoC,MAAA,CAAAxC,KAAA,CAAAwC,MAAA,CAAAxC,KAAA,CAAA+B,MAAA,+BAAOC,EAAP,CAAAQ,MAAW,CAAAxC,KAAA,CAAAe,OAAA,CAAXyB,MAAmB,CAAAxC,KAAA,CAAnBwC,MAAmB,CAAAxC,KAAA,CAAAyB,MAAA,gDAAOiB,SAAP,wCAAR,6BAAX,EAAsC,CAAtC;AAAA,YAAAzB,OAAA;AAAA,YAAAC,QAAA;AAAA,YAAAC,IAAA;AAAA,UAAR,EADoD;AAAA,QAEpDL,MAAA,CAAQ2B,MAAA,CAAArC,KAAA,CAAAqC,MAAA,CAAAzC,KAAA,CAAAyC,MAAA,CAAAzC,KAAA,CAAA+B,MAAA,+BAAOC,EAAP,CAAAS,MAAW,CAAAzC,KAAA,CAAAe,OAAA,CAAX0B,MAAmB,CAAAzC,KAAA,EAAnByC,MAAoB,CAAAzC,KAAA,CAApByC,MAAoB,CAAAzC,KAAA,CAAAyB,MAAA,yDAAOiB,SAAP,iDAAD,wCAAR,6BAAX,EAAAD,MAAuC,CAAAzC,KAAA,EAAC,CAAD,4BAAvC;AAAA,YAAAiB,OAAA;AAAA,YAAAC,QAAA;AAAA,YAAAC,IAAA;AAAA,UAAR,EAFoD;AAAA,KAAtD,EAtC0B;AAAA,IA2C1BP,EAAA,CAAG,2DAAH,EAA6D,MAAM;AAAA,QACzD,IAAA+B,MAAA,OAAA/C,qBAAA,GADyD;AAAA,QAEzD,IAAAgD,MAAA,OAAAhD,qBAAA,GAFyD;AAAA,QAGzD,IAAAiD,MAAA,OAAAjD,qBAAA,GAHyD;AAAA,QAIzD,IAAAkD,MAAA,OAAAlD,qBAAA,GAJyD;AAAA,QACjEkB,MAAA,CAAQ6B,MAAA,CAAAvC,KAAA,CAAAuC,MAAA,CAAA3C,KAAA,CAAA2C,MAAA,CAAA3C,KAAA,CAAAe,OAAA,CAAA4B,MAAQ,CAAA3C,KAAA,CAAAU,UAAA,iCAAR,2BAAAiC,MAAwB,CAAA3C,KAAA,CAAAU,UAAA,sBAAxB;AAAA,YAAAO,OAAA;AAAA,YAAAC,QAAA;AAAA,YAAAC,IAAA;AAAA,UAAR,EADiE;AAAA,QAEjEL,MAAA,CAAQ8B,MAAA,CAAAxC,KAAA,CAAAwC,MAAA,CAAA5C,KAAA,CAAA4C,MAAA,CAAA5C,KAAA,CAAAe,OAAA,CAAA6B,MAAQ,CAAA5C,KAAA,EAAR4C,MAAS,CAAA5C,KAAA,CAAAU,UAAA,0CAAD,iCAAR,2BAAAkC,MAAyB,CAAA5C,KAAA,EAAzB4C,MAA0B,CAAA5C,KAAA,CAAAU,UAAA,+BAAD,sBAAzB;AAAA,YAAAO,OAAA;AAAA,YAAAC,QAAA;AAAA,YAAAC,IAAA;AAAA,UAAR,EAFiE;AAAA,QAGjEL,MAAA,CAAQ+B,MAAA,CAAAzC,KAAA,CAAAyC,MAAA,CAAA7C,KAAA,CAAA6C,MAAA,CAAA7C,KAAA,CAAAe,OAAA,CAAA8B,MAAQ,CAAA7C,KAAA,CAAAW,UAAA,iCAAR,2BAAAkC,MAAwB,CAAA7C,KAAA,CAAAW,UAAA,sBAAxB;AAAA,YAAAM,OAAA;AAAA,YAAAC,QAAA;AAAA,YAAAC,IAAA;AAAA,UAAR,EAHiE;AAAA,QAIjEL,MAAA,CAAQgC,MAAA,CAAA1C,KAAA,CAAA0C,MAAA,CAAA9C,KAAA,CAAA8C,MAAA,CAAA9C,KAAA,CAAAe,OAAA,CAAA+B,MAAQ,CAAA9C,KAAA,EAAR8C,MAAS,CAAA9C,KAAA,CAAAW,UAAA,0CAAD,iCAAR,2BAAAmC,MAAyB,CAAA9C,KAAA,EAAzB8C,MAA0B,CAAA9C,KAAA,CAAAW,UAAA,+BAAD,sBAAzB;AAAA,YAAAM,OAAA;AAAA,YAAAC,QAAA;AAAA,YAAAC,IAAA;AAAA,UAAR,EAJiE;AAAA,KAAnE,EA3C0B;AAAA,IAkD1BP,EAAA,CAAG,kDAAH,EAAoD,MAAM;AAAA,QAChD,IAAAmC,MAAA,OAAAnD,qBAAA,GADgD;AAAA,QAEhD,IAAAoD,MAAA,OAAApD,qBAAA,GAFgD;AAAA,QACxDkB,MAAA,CAAQiC,MAAA,CAAA3C,KAAA,CAAA2C,MAAA,CAAA/C,KAAA,CAAA+C,MAAA,CAAA/C,KAAA,CAAA+B,MAAA,+BAAOC,EAAP,CAAAe,MAAW,CAAA/C,KAAA,CAAAe,OAAA,CAAXgC,MAAmB,CAAA/C,KAAA,CAAnB+C,MAAmB,CAAA/C,KAAA,CAAAW,UAAA,gDAAa,CAAb,wCAAR,6BAAX,EAAoC,CAApC;AAAA,YAAAM,OAAA;AAAA,YAAAC,QAAA;AAAA,YAAAC,IAAA;AAAA,UAAR,EADwD;AAAA,QAExDL,MAAA,CAAQkC,MAAA,CAAA5C,KAAA,CAAA4C,MAAA,CAAAhD,KAAA,CAAAgD,MAAA,CAAAhD,KAAA,CAAA+B,MAAA,+BAAOC,EAAP,CAAAgB,MAAW,CAAAhD,KAAA,CAAAe,OAAA,CAAXiC,MAAmB,CAAAhD,KAAA,CAAnBgD,MAAmB,CAAAhD,KAAA,EAAnBgD,MAAoB,CAAAhD,KAAA,CAAAW,UAAA,sDAAD,gDAAc,CAAd,wCAAR,6BAAX,EAAAqC,MAAqC,CAAAhD,KAAA,EAAC,CAAD,4BAArC;AAAA,YAAAiB,OAAA;AAAA,YAAAC,QAAA;AAAA,YAAAC,IAAA;AAAA,UAAR,EAFwD;AAAA,KAA1D,EAlD0B;AAAA,IAuD1BP,EAAA,CAAG,wFAAH,EAAoF,MAAM;AAAA,QAChF,IAAAqC,MAAA,OAAArD,qBAAA,GADgF;AAAA,QAEhF,IAAAsD,MAAA,OAAAtD,qBAAA,GAFgF;AAAA,QACxFkB,MAAA,CAAQmC,MAAA,CAAA7C,KAAA,CAAA6C,MAAA,CAAAjD,KAAA,CAAAiD,MAAA,CAAAjD,KAAA,CAAAe,OAAA,CAAAkC,MAAQ,CAAAjD,KAAA,CAARiD,MAAQ,CAAAjD,KAAA,CAARiD,MAAQ,CAAAjD,KAAA,CAAAW,UAAA,8CAAa,CAAb,yCAARsC,MAAyB,CAAAjD,KAAA,MAAzBiD,MAA8B,CAAAjD,KAAA,EAAC,EAAD,6CAAL,uCAAjB,iCAAR,2BAAAiD,MAAuC,CAAAjD,KAAA,CAAAW,UAAA,sBAAvC;AAAA,YAAAM,OAAA;AAAA,YAAAC,QAAA;AAAA,YAAAC,IAAA;AAAA,UAAR,EADwF;AAAA,QAExFL,MAAA,CAAQoC,MAAA,CAAA9C,KAAA,CAAA8C,MAAA,CAAAlD,KAAA,CAAAkD,MAAA,CAAAlD,KAAA,CAAAe,OAAA,CAAAmC,MAAQ,CAAAlD,KAAA,CAARkD,MAAQ,CAAAlD,KAAA,CAARkD,MAAQ,CAAAlD,KAAA,EAARkD,MAAS,CAAAlD,KAAA,CAAAW,UAAA,oDAAD,8CAAc,CAAd,yCAARuC,MAA0B,CAAAlD,KAAA,MAA1BkD,MAA+B,CAAAlD,KAAA,EAAC,EAAD,6CAAL,uCAAlB,iCAAR,2BAAAkD,MAAwC,CAAAlD,KAAA,EAAxCkD,MAAyC,CAAAlD,KAAA,CAAAW,UAAA,+BAAD,sBAAxC;AAAA,YAAAM,OAAA;AAAA,YAAAC,QAAA;AAAA,YAAAC,IAAA;AAAA,UAAR,EAFwF;AAAA,KAA1F,EAvD0B;AAAA,IA4D1BP,EAAA,CAAG,yCAAH,EAA8C,MAAM;AAAA,QAC1C,IAAAuC,MAAA,OAAAvD,qBAAA,GAD0C;AAAA,QAClDkB,MAAA,CAAQqC,MAAA,CAAA/C,KAAA,CAAA+C,MAAA,CAAAnD,KAAA,CAAAmD,MAAA,CAAAnD,KAAA,CAAAe,OAAA,CAAQ,KAAR,2BAAmB,YAAnB;AAAA,YAAAE,OAAA;AAAA,YAAAC,QAAA;AAAA,YAAAC,IAAA;AAAA,UAAR,EADkD;AAAA,KAApD,EA5D0B;AAAA,IAgE1BP,EAAA,CAAG,sCAAH,EAA2C,YAAY;AAAA,QAErD,IAAI,OAAOwC,MAAP,KAAkB,WAAtB,EAAmC;AAAA,YACjC,KAAKC,IAAL,GADiC;AAAA,SAFkB;AAAA,QAMrDvC,MAAA,CAAOwC,MAAP,CAAc,MAAM;AAAA,YAAEvC,OAAA,CAAQqC,MAAA,CAAO,CAAP,CAAR,EAAF;AAAA,SAApB,EAA6CG,SAA7C,EANqD;AAAA,KAAvD,EAhE0B;AAAA,CAA5B",
  "sourceRoot": "./",
  "sourcesContent": [
    "/* eslint-env mocha, es2020 */\n/* global assert hfround */\n\ndescribe(\"hfround()\", () => {\n\n  const maxFloat16 = 65504;\n  const minFloat16 = 2 ** -24;\n\n  it(\"property `name` is 'hfround'\", () => {\n    assert( hfround.name === \"hfround\" );\n  });\n\n  it(\"property `length` is 1\", () => {\n    assert( hfround.length === 1 );\n  });\n\n  it(\"return NaN when value is empty or undefined or NaN\", () => {\n    assert( Number.isNaN( hfround() ) );\n    assert( Number.isNaN( hfround(undefined) ) );\n    assert( Number.isNaN( hfround(NaN) ) );\n  });\n\n  it(\"return 0 when value is 0 or null\", () => {\n    assert( Object.is( hfround(0), 0 ) );\n    assert( Object.is( hfround(null), 0 ) );\n  });\n\n  it(\"return -0 when value is -0\", () => {\n    assert( Object.is( hfround(-0), -0 ) );\n  });\n\n  it(\"return ±Infinity when value is ±Infinity\", () => {\n    assert( hfround(Infinity) === Infinity );\n    assert( hfround(-Infinity) === -Infinity );\n  });\n\n  it(\"return ±Infinity when value is ±Number.MAX_VALUE\", () => {\n    assert( hfround(Number.MAX_VALUE) === Infinity );\n    assert( hfround(-Number.MAX_VALUE) === -Infinity );\n  });\n\n  it(\"return ±0 when value is ±Number.MIN_VALUE\", () => {\n    assert( Object.is( hfround(Number.MIN_VALUE), 0 ) );\n    assert( Object.is( hfround(-Number.MIN_VALUE), -0 ) );\n  });\n\n  it(\"return same value when value is ±float16 max/min value\", () => {\n    assert( hfround(maxFloat16) === maxFloat16 );\n    assert( hfround(-maxFloat16) === -maxFloat16 );\n    assert( hfround(minFloat16) === minFloat16 );\n    assert( hfround(-minFloat16) === -minFloat16 );\n  });\n\n  it(\"return 0 when value is ±float16 min value / 2\", () => {\n    assert( Object.is( hfround(minFloat16 / 2), 0 ) );\n    assert( Object.is( hfround(-minFloat16 / 2), -0 ) );\n  });\n\n  it(\"return ±float16 min value when value is ±float16 min value / 2 ± a bit number\", () => {\n    assert( hfround(minFloat16 / 2 + 2 ** -25) === minFloat16 );\n    assert( hfround(-minFloat16 / 2 - 2 ** -25) === -minFloat16 );\n  });\n\n  it(\"return 1.3369140625 when value is 1.337\", () => {\n    assert( hfround(1.337) === 1.3369140625 );\n  });\n\n  it(\"throw TypeError when value is bigint\", function () {\n    // Safari 13 doesn't have BigInt\n    if (typeof BigInt === \"undefined\") {\n      this.skip();\n    }\n\n    assert.throws(() => { hfround(BigInt(0)); }, TypeError);\n  });\n});\n"
  ]
}