{
  "version": 3,
  "sources": [
    "test/DataView.js"
  ],
  "names": [
    "_PowerAssertRecorder1",
    "PowerAssertRecorder",
    "captured",
    "prototype",
    "_capt",
    "value",
    "espath",
    "push",
    "_expr",
    "source",
    "capturedValues",
    "powerAssertContext",
    "events",
    "describe",
    "data",
    "NaN",
    "Infinity",
    "buffer",
    "ArrayBuffer",
    "dataView",
    "DataView",
    "clear",
    "Uint16Array",
    "AnotherRealmDataView",
    "before",
    "timeout",
    "window",
    "iframe",
    "document",
    "createElement",
    "setAttribute",
    "style",
    "display",
    "body",
    "parentElement",
    "appendChild",
    "contentWindow",
    "remove",
    "global",
    "require",
    "runInNewContext",
    "Error",
    "beforeEach",
    "it",
    "_rec1",
    "assert",
    "getFloat16",
    "name",
    "content",
    "filepath",
    "line",
    "_rec2",
    "length",
    "doesNotThrow",
    "throws",
    "TypeError",
    "_rec3",
    "_rec4",
    "float16bits",
    "setUint16",
    "Object",
    "is",
    "_rec5",
    "_rec6",
    "Number",
    "isNaN",
    "_rec7",
    "setFloat16",
    "_rec8",
    "_rec9",
    "_rec10",
    "getUint16"
  ],
  "mappings": "AAAA,IAAAA,qBAAA;AAAA,aAAAC,mBAAA;AAAA,aAAAC,QAAA;AAAA;AAAA,IAAAD,mBAAA,CAAAE,SAAA,CAAAC,KAAA,YAAAA,KAAA,CAAAC,KAAA,EAAAC,MAAA;AAAA,aAAAJ,QAAA,CAAAK,IAAA;AAAA,YAAAF,KAAA,EAAAA,KAAA;AAAA,YAAAC,MAAA,EAAAA,MAAA;AAAA;AAAA,eAAAD,KAAA;AAAA;AAAA,IAAAJ,mBAAA,CAAAE,SAAA,CAAAK,KAAA,YAAAA,KAAA,CAAAH,KAAA,EAAAI,MAAA;AAAA,YAAAC,cAAA,QAAAR,QAAA;AAAA,aAAAA,QAAA;AAAA;AAAA,YAAAS,kBAAA;AAAA,gBAAAN,KAAA,EAAAA,KAAA;AAAA,gBAAAO,MAAA,EAAAF,cAAA;AAAA;AAAA,YAAAD,MAAA,EAAAA,MAAA;AAAA;AAAA;AAAA,WAAAR,mBAAA;AAAA;AAGAY,QAAA,CAAS,6BAAT,EAAwC,MAAM;AAAA,IAE5C,MAAMC,IAAA,GAAO;AAAA,QACX;AAAA,YAAC,CAAD;AAAA,YAAqB,CAArB;AAAA,SADW;AAAA,QAEX;AAAA,YAAC,KAAD;AAAA,YAAqB,CAAC,CAAtB;AAAA,SAFW;AAAA,QAGX;AAAA,YAAC,KAAD;AAAA,YAAqB,CAArB;AAAA,SAHW;AAAA,QAIX;AAAA,YAAC,KAAD;AAAA,YAAqB,CAAC,CAAtB;AAAA,SAJW;AAAA,QAKX;AAAA,YAAC,KAAD;AAAA,YAAqB,QAArB;AAAA,SALW;AAAA,QAMX;AAAA,YAAC,GAAD;AAAA,YAAqB,iBAArB;AAAA,SANW;AAAA,QAOX;AAAA,YAAC,KAAD;AAAA,YAAqB,KAArB;AAAA,SAPW;AAAA,QAQX;AAAA,YAAC,KAAD;AAAA,YAAqB,CAAC,KAAtB;AAAA,SARW;AAAA,QASX;AAAA,YAAC,CAAD;AAAA,YAAqB,KAAK,CAAC,EAA3B;AAAA,SATW;AAAA,QAUX;AAAA,YAAC,KAAD;AAAA,YAAqB,CAAE,MAAK,CAAC,EAAN,CAAvB;AAAA,SAVW;AAAA,QAWX;AAAA,YAAC,KAAD;AAAA,YAAqBC,GAArB;AAAA,SAXW;AAAA,QAYX;AAAA,YAAC,KAAD;AAAA,YAAqBC,QAArB;AAAA,SAZW;AAAA,QAaX;AAAA,YAAC,KAAD;AAAA,YAAqB,CAACA,QAAtB;AAAA,SAbW;AAAA,KAAb,CAF4C;AAAA,IAkB5C,MAAMC,MAAA,GAAS,IAAIC,WAAJ,CAAgB,CAAhB,CAAf,CAlB4C;AAAA,IAmB5C,MAAMC,QAAA,GAAW,IAAIC,QAAJ,CAAaH,MAAb,CAAjB,CAnB4C;AAAA,IAqB5C,SAASI,KAAT,GAAiB;AAAA,QACf,IAAIC,WAAJ,CAAgBL,MAAhB,EAAwB,CAAxB,IAA6B,CAA7B,CADe;AAAA,KArB2B;AAAA,IA0B5C,IAAIM,oBAAJ,CA1B4C;AAAA,IA4B5CC,MAAA,CAAO,kBAAkB;AAAA,QACvB,KAAKC,OAAL,CAAa,KAAb,EADuB;AAAA,QAGvB,IAAI,OAAOC,MAAP,KAAkB,WAAtB,EAAmC;AAAA,YACjC,MAAMC,MAAA,GAASC,QAAA,CAASC,aAAT,CAAuB,QAAvB,CAAf,CADiC;AAAA,YAEjCF,MAAA,CAAOG,YAAP,CAAoB,SAApB,EAA+B,iCAA/B,EAFiC;AAAA,YAGjCH,MAAA,CAAOI,KAAP,CAAaC,OAAb,GAAuB,MAAvB,CAHiC;AAAA,YAIjCJ,QAAA,CAASK,IAAT,CAAcC,aAAd,CAA4BC,WAA5B,CAAwCR,MAAxC,EAJiC;AAAA,YAKjCJ,oBAAA,GAAuBI,MAAA,CAAOS,aAAP,CAAqBhB,QAA5C,CALiC;AAAA,YAMjCO,MAAA,CAAOU,MAAP,GANiC;AAAA,SAAnC,MAOO,IAAI,OAAOC,MAAP,KAAkB,WAAlB,IAAiC,OAAOC,OAAP,KAAmB,WAAxD,EAAqE;AAAA,YAC1EhB,oBAAA,GAAuBgB,OAAA,CAAQ,IAAR,EAAcC,eAAd,CAA8B,UAA9B,CAAvB,CAD0E;AAAA,SAArE,MAEA;AAAA,YACL,MAAM,IAAIC,KAAJ,CAAU,yBAAV,CAAN,CADK;AAAA,SAZgB;AAAA,KAAzB,EA5B4C;AAAA,IA6C5C5B,QAAA,CAAS,cAAT,EAAyB,MAAM;AAAA,QAE7B6B,UAAA,CAAYrB,KAAZ,EAF6B;AAAA,QAI7BsB,EAAA,CAAG,mCAAH,EAAsC,MAAM;AAAA,YAClC,IAAAC,KAAA,OAAA5C,qBAAA,GADkC;AAAA,YAC1C6C,MAAA,CAAQD,KAAA,CAAApC,KAAA,CAAAoC,KAAA,CAAAxC,KAAA,CAAAwC,KAAA,CAAAxC,KAAA,CAAAwC,KAAA,CAAAxC,KAAA,CAAA0C,UAAA,6BAAWC,IAAX,0BAAoB,YAApB;AAAA,gBAAAC,OAAA;AAAA,gBAAAC,QAAA;AAAA,gBAAAC,IAAA;AAAA,cAAR,EAD0C;AAAA,SAA5C,EAJ6B;AAAA,QAQ7BP,EAAA,CAAG,wBAAH,EAA6B,MAAM;AAAA,YACzB,IAAAQ,KAAA,OAAAnD,qBAAA,GADyB;AAAA,YACjC6C,MAAA,CAAQM,KAAA,CAAA3C,KAAA,CAAA2C,KAAA,CAAA/C,KAAA,CAAA+C,KAAA,CAAA/C,KAAA,CAAA+C,KAAA,CAAA/C,KAAA,CAAA0C,UAAA,6BAAWM,MAAX,0BAAsB,CAAtB;AAAA,gBAAAJ,OAAA;AAAA,gBAAAC,QAAA;AAAA,gBAAAC,IAAA;AAAA,cAAR,EADiC;AAAA,SAAnC,EAR6B;AAAA,QAY7BP,EAAA,CAAG,0CAAH,EAA+C,MAAM;AAAA,YACnDE,MAAA,CAAOQ,YAAP,CAAoB,MAAMP,UAAA,CAAW3B,QAAX,EAAqB,CAArB,CAA1B,EADmD;AAAA,YAGnD0B,MAAA,CAAOS,MAAP,CAAc,MAAMR,UAAA,CAAW,IAAX,EAAiB,CAAjB,CAApB,EAAyCS,SAAzC,EAHmD;AAAA,YAInDV,MAAA,CAAOS,MAAP,CAAc,MAAMR,UAAA,CAAW,IAAX,EAAiB,CAAjB,CAApB,EAAyCS,SAAzC,EAJmD;AAAA,YAKnDV,MAAA,CAAOS,MAAP,CAAc,MAAMR,UAAA,CAAW,MAAX,EAAmB,CAAnB,CAApB,EAA2CS,SAA3C,EALmD;AAAA,YAMnDV,MAAA,CAAOS,MAAP,CAAc,MAAMR,UAAA,CAAW,EAAX,EAAe,CAAf,CAApB,EAAuCS,SAAvC,EANmD;AAAA,YAOnDV,MAAA,CAAOS,MAAP,CAAc,MAAMR,UAAA,CAAW,EAAX,EAAe,CAAf,CAApB,EAAuCS,SAAvC,EAPmD;AAAA,YAQnDV,MAAA,CAAOS,MAAP,CAAc,MAAMR,UAAA,CAAW,MAAM;AAAA,aAAjB,EAAqB,CAArB,CAApB,EAA6CS,SAA7C,EARmD;AAAA,SAArD,EAZ6B;AAAA,QAuB7BZ,EAAA,CAAG,YAAH,EAAiB,MAAM;AAAA,YAGX,IAAAa,KAAA,OAAAxD,qBAAA,GAHW;AAAA,YAMX,IAAAyD,KAAA,OAAAzD,qBAAA,GANW;AAAA,YACrB,WAAW,CAAC0D,WAAD,EAAcrD,KAAd,CAAX,IAAmCS,IAAnC,EAAyC;AAAA,gBACvCK,QAAA,CAASwC,SAAT,CAAmB,CAAnB,EAAsBD,WAAtB,EADuC;AAAA,gBAEvCb,MAAA,CAAQW,KAAA,CAAAhD,KAAA,CAAAgD,KAAA,CAAApD,KAAA,CAAAoD,KAAA,CAAApD,KAAA,CAAAwD,MAAA,+BAAOC,EAAP,CAAAL,KAAW,CAAApD,KAAA,CAAA0C,UAAA,CAAXU,KAAsB,CAAApD,KAAA,CAAAe,QAAA,wCAAX,EAAqB,CAArB,6BAAX,EAAAqC,KAAoC,CAAApD,KAAA,CAAAC,KAAA,4BAApC;AAAA,oBAAA2C,OAAA;AAAA,oBAAAC,QAAA;AAAA,oBAAAC,IAAA;AAAA,kBAAR,EAFuC;AAAA,gBAIvC/B,QAAA,CAASwC,SAAT,CAAmB,CAAnB,EAAsBD,WAAtB,EAAmC,IAAnC,EAJuC;AAAA,gBAKvCb,MAAA,CAAQY,KAAA,CAAAjD,KAAA,CAAAiD,KAAA,CAAArD,KAAA,CAAAqD,KAAA,CAAArD,KAAA,CAAAwD,MAAA,+BAAOC,EAAP,CAAAJ,KAAW,CAAArD,KAAA,CAAA0C,UAAA,CAAXW,KAAsB,CAAArD,KAAA,CAAAe,QAAA,wCAAX,EAAqB,CAArB,EAAwB,IAAxB,6BAAX,EAAAsC,KAA0C,CAAArD,KAAA,CAAAC,KAAA,4BAA1C;AAAA,oBAAA2C,OAAA;AAAA,oBAAAC,QAAA;AAAA,oBAAAC,IAAA;AAAA,kBAAR,EALuC;AAAA,aADpB;AAAA,SAAvB,EAvB6B;AAAA,QAiC7BP,EAAA,CAAG,iBAAH,EAAsB,MAAM;AAAA,YAIlB,IAAAmB,KAAA,OAAA9D,qBAAA,GAJkB;AAAA,YAOlB,IAAA+D,KAAA,OAAA/D,qBAAA,GAPkB;AAAA,YAC1B,MAAM0D,WAAA,GAAc,KAApB,CAD0B;AAAA,YAG1BvC,QAAA,CAASwC,SAAT,CAAmB,CAAnB,EAAsBD,WAAtB,EAH0B;AAAA,YAI1Bb,MAAA,CAAQiB,KAAA,CAAAtD,KAAA,CAAAsD,KAAA,CAAA1D,KAAA,CAAA0D,KAAA,CAAA1D,KAAA,CAAA4D,MAAA,+BAAOC,KAAP,CAAAH,KAAc,CAAA1D,KAAA,CAAA0C,UAAA,CAAdgB,KAAyB,CAAA1D,KAAA,CAAAe,QAAA,wCAAX,EAAqB,CAArB,6BAAd;AAAA,gBAAA6B,OAAA;AAAA,gBAAAC,QAAA;AAAA,gBAAAC,IAAA;AAAA,cAAR,EAJ0B;AAAA,YAM1B/B,QAAA,CAASwC,SAAT,CAAmB,CAAnB,EAAsBD,WAAtB,EAAmC,IAAnC,EAN0B;AAAA,YAO1Bb,MAAA,CAAQkB,KAAA,CAAAvD,KAAA,CAAAuD,KAAA,CAAA3D,KAAA,CAAA2D,KAAA,CAAA3D,KAAA,CAAA4D,MAAA,+BAAOC,KAAP,CAAAF,KAAc,CAAA3D,KAAA,CAAA0C,UAAA,CAAdiB,KAAyB,CAAA3D,KAAA,CAAAe,QAAA,wCAAX,EAAqB,CAArB,EAAwB,IAAxB,6BAAd;AAAA,gBAAA6B,OAAA;AAAA,gBAAAC,QAAA;AAAA,gBAAAC,IAAA;AAAA,cAAR,EAP0B;AAAA,SAA5B,EAjC6B;AAAA,QA2C7BP,EAAA,CAAG,uCAAH,EAA4C,MAAM;AAAA,YAChDE,MAAA,CAAOQ,YAAP,CAAoB,MAAMP,UAAA,CAAW,IAAIvB,oBAAJ,CAAyBN,MAAzB,CAAX,EAA6C,CAA7C,CAA1B,EADgD;AAAA,SAAlD,EA3C6B;AAAA,KAA/B,EA7C4C;AAAA,IA8F5CJ,QAAA,CAAS,cAAT,EAAyB,MAAM;AAAA,QAE7B6B,UAAA,CAAYrB,KAAZ,EAF6B;AAAA,QAI7BsB,EAAA,CAAG,mCAAH,EAAsC,MAAM;AAAA,YAClC,IAAAuB,KAAA,OAAAlE,qBAAA,GADkC;AAAA,YAC1C6C,MAAA,CAAQqB,KAAA,CAAA1D,KAAA,CAAA0D,KAAA,CAAA9D,KAAA,CAAA8D,KAAA,CAAA9D,KAAA,CAAA8D,KAAA,CAAA9D,KAAA,CAAA+D,UAAA,6BAAWpB,IAAX,0BAAoB,YAApB;AAAA,gBAAAC,OAAA;AAAA,gBAAAC,QAAA;AAAA,gBAAAC,IAAA;AAAA,cAAR,EAD0C;AAAA,SAA5C,EAJ6B;AAAA,QAQ7BP,EAAA,CAAG,wBAAH,EAA6B,MAAM;AAAA,YACzB,IAAAyB,KAAA,OAAApE,qBAAA,GADyB;AAAA,YACjC6C,MAAA,CAAQuB,KAAA,CAAA5D,KAAA,CAAA4D,KAAA,CAAAhE,KAAA,CAAAgE,KAAA,CAAAhE,KAAA,CAAAgE,KAAA,CAAAhE,KAAA,CAAA+D,UAAA,6BAAWf,MAAX,0BAAsB,CAAtB;AAAA,gBAAAJ,OAAA;AAAA,gBAAAC,QAAA;AAAA,gBAAAC,IAAA;AAAA,cAAR,EADiC;AAAA,SAAnC,EAR6B;AAAA,QAY7BP,EAAA,CAAG,0CAAH,EAA+C,MAAM;AAAA,YACnDE,MAAA,CAAOQ,YAAP,CAAoB,MAAMc,UAAA,CAAWhD,QAAX,EAAqB,CAArB,EAAwB,CAAxB,CAA1B,EADmD;AAAA,YAGnD0B,MAAA,CAAOS,MAAP,CAAc,MAAMa,UAAA,CAAW,IAAX,EAAiB,CAAjB,EAAoB,CAApB,CAApB,EAA4CZ,SAA5C,EAHmD;AAAA,YAInDV,MAAA,CAAOS,MAAP,CAAc,MAAMa,UAAA,CAAW,IAAX,EAAiB,CAAjB,EAAoB,CAApB,CAApB,EAA4CZ,SAA5C,EAJmD;AAAA,YAKnDV,MAAA,CAAOS,MAAP,CAAc,MAAMa,UAAA,CAAW,MAAX,EAAmB,CAAnB,EAAsB,CAAtB,CAApB,EAA8CZ,SAA9C,EALmD;AAAA,YAMnDV,MAAA,CAAOS,MAAP,CAAc,MAAMa,UAAA,CAAW,EAAX,EAAe,CAAf,EAAkB,CAAlB,CAApB,EAA0CZ,SAA1C,EANmD;AAAA,YAOnDV,MAAA,CAAOS,MAAP,CAAc,MAAMa,UAAA,CAAW,EAAX,EAAe,CAAf,EAAkB,CAAlB,CAApB,EAA0CZ,SAA1C,EAPmD;AAAA,YAQnDV,MAAA,CAAOS,MAAP,CAAc,MAAMa,UAAA,CAAW,MAAM;AAAA,aAAjB,EAAqB,CAArB,EAAwB,CAAxB,CAApB,EAAgDZ,SAAhD,EARmD;AAAA,SAArD,EAZ6B;AAAA,QAuB7BZ,EAAA,CAAG,YAAH,EAAiB,MAAM;AAAA,YAGX,IAAA0B,KAAA,OAAArE,qBAAA,GAHW;AAAA,YAMX,IAAAsE,MAAA,OAAAtE,qBAAA,GANW;AAAA,YACrB,WAAW,CAAC0D,WAAD,EAAcrD,KAAd,CAAX,IAAmCS,IAAnC,EAAyC;AAAA,gBACvCqD,UAAA,CAAWhD,QAAX,EAAqB,CAArB,EAAwBd,KAAxB,EADuC;AAAA,gBAEvCwC,MAAA,CAAQwB,KAAA,CAAA7D,KAAA,CAAA6D,KAAA,CAAAjE,KAAA,CAAAiE,KAAA,CAAAjE,KAAA,CAAAwD,MAAA,+BAAOC,EAAP,CAAAQ,KAAW,CAAAjE,KAAA,CAAXiE,KAAW,CAAAjE,KAAA,CAAAe,QAAA,2CAASoD,SAAT,CAAmB,CAAnB,6BAAX,EAAAF,KAAkC,CAAAjE,KAAA,CAAAsD,WAAA,4BAAlC;AAAA,oBAAAV,OAAA;AAAA,oBAAAC,QAAA;AAAA,oBAAAC,IAAA;AAAA,kBAAR,EAFuC;AAAA,gBAIvCiB,UAAA,CAAWhD,QAAX,EAAqB,CAArB,EAAwBd,KAAxB,EAA+B,IAA/B,EAJuC;AAAA,gBAKvCwC,MAAA,CAAQyB,MAAA,CAAA9D,KAAA,CAAA8D,MAAA,CAAAlE,KAAA,CAAAkE,MAAA,CAAAlE,KAAA,CAAAwD,MAAA,+BAAOC,EAAP,CAAAS,MAAW,CAAAlE,KAAA,CAAXkE,MAAW,CAAAlE,KAAA,CAAAe,QAAA,2CAASoD,SAAT,CAAmB,CAAnB,EAAsB,IAAtB,6BAAX,EAAAD,MAAwC,CAAAlE,KAAA,CAAAsD,WAAA,4BAAxC;AAAA,oBAAAV,OAAA;AAAA,oBAAAC,QAAA;AAAA,oBAAAC,IAAA;AAAA,kBAAR,EALuC;AAAA,aADpB;AAAA,SAAvB,EAvB6B;AAAA,QAiC7BP,EAAA,CAAG,uCAAH,EAA4C,MAAM;AAAA,YAChDE,MAAA,CAAOQ,YAAP,CAAoB,MAAMc,UAAA,CAAW,IAAI5C,oBAAJ,CAAyBN,MAAzB,CAAX,EAA6C,CAA7C,EAAgD,CAAhD,CAA1B,EADgD;AAAA,SAAlD,EAjC6B;AAAA,KAA/B,EA9F4C;AAAA,CAA9C",
  "sourceRoot": "./",
  "sourcesContent": [
    "/* eslint-env mocha, browser, node */\n/* global assert getFloat16 setFloat16 */\n\ndescribe(\"additional DataView methods\", () => {\n\n  const data = [\n    [0b0000000000000000, 0],\n    [0b1000000000000000, -0],\n    [0b0011110000000000, 1],\n    [0b1011110000000000, -1],\n    [0b0100001001001000, 3.140625],\n    [0b0000001000000000, 0.000030517578125],\n    [0b0111101111111111, 65504],\n    [0b1111101111111111, -65504],\n    [0b0000000000000001, 2 ** -24],\n    [0b1000000000000001, -(2 ** -24)],\n    [0b0111111000000000, NaN],\n    [0b0111110000000000, Infinity],\n    [0b1111110000000000, -Infinity],\n  ];\n\n  const buffer = new ArrayBuffer(2);\n  const dataView = new DataView(buffer);\n\n  function clear() {\n    new Uint16Array(buffer)[0] = 0;\n  }\n\n  /** @type {DataViewConstructor} */\n  let AnotherRealmDataView;\n\n  before(async function () {\n    this.timeout(15000);\n\n    if (typeof window !== \"undefined\") {\n      const iframe = document.createElement(\"iframe\");\n      iframe.setAttribute(\"sandbox\", \"allow-same-origin allow-scripts\");\n      iframe.style.display = \"none\";\n      document.body.parentElement.appendChild(iframe);\n      AnotherRealmDataView = iframe.contentWindow.DataView;\n      iframe.remove();\n    } else if (typeof global !== \"undefined\" && typeof require !== \"undefined\") {\n      AnotherRealmDataView = require(\"vm\").runInNewContext(\"DataView\");\n    } else {\n      throw new Error(\"Unexpected environment.\");\n    }\n  });\n\n  describe(\"getFloat16()\", () => {\n\n    beforeEach( clear );\n\n    it(\"property `name` is 'getFloat16'\", () => {\n      assert( getFloat16.name === \"getFloat16\" );\n    });\n\n    it(\"property `length` is 2\", () => {\n      assert( getFloat16.length === 2 );\n    });\n\n    it(\"first argument must be DataView instance\", () => {\n      assert.doesNotThrow(() => getFloat16(dataView, 0));\n\n      assert.throws(() => getFloat16(null, 0), TypeError);\n      assert.throws(() => getFloat16(3.14, 0), TypeError);\n      assert.throws(() => getFloat16(\"test\", 0), TypeError);\n      assert.throws(() => getFloat16({}, 0), TypeError);\n      assert.throws(() => getFloat16([], 0), TypeError);\n      assert.throws(() => getFloat16(() => {}, 0), TypeError);\n    });\n\n    it(\"get values\", () => {\n      for (const [float16bits, value] of data) {\n        dataView.setUint16(0, float16bits);\n        assert( Object.is( getFloat16(dataView, 0), value ) );\n\n        dataView.setUint16(0, float16bits, true);\n        assert( Object.is( getFloat16(dataView, 0, true), value ) );\n      }\n    });\n\n    it(\"get another NaN\", () => {\n      const float16bits = 0b1111111000000000;\n\n      dataView.setUint16(0, float16bits);\n      assert( Number.isNaN( getFloat16(dataView, 0) ) );\n\n      dataView.setUint16(0, float16bits, true);\n      assert( Number.isNaN( getFloat16(dataView, 0, true) ) );\n    });\n\n    it(\"work with DataView from anothor realm\", () => {\n      assert.doesNotThrow(() => getFloat16(new AnotherRealmDataView(buffer), 0));\n    });\n\n  });\n\n  describe(\"setFloat16()\", () => {\n\n    beforeEach( clear );\n\n    it(\"property `name` is 'setFloat16'\", () => {\n      assert( setFloat16.name === \"setFloat16\" );\n    });\n\n    it(\"property `length` is 3\", () => {\n      assert( setFloat16.length === 3 );\n    });\n\n    it(\"first argument must be DataView instance\", () => {\n      assert.doesNotThrow(() => setFloat16(dataView, 0, 0));\n\n      assert.throws(() => setFloat16(null, 0, 0), TypeError);\n      assert.throws(() => setFloat16(3.14, 0, 0), TypeError);\n      assert.throws(() => setFloat16(\"test\", 0, 0), TypeError);\n      assert.throws(() => setFloat16({}, 0, 0), TypeError);\n      assert.throws(() => setFloat16([], 0, 0), TypeError);\n      assert.throws(() => setFloat16(() => {}, 0, 0), TypeError);\n    });\n\n    it(\"set values\", () => {\n      for (const [float16bits, value] of data) {\n        setFloat16(dataView, 0, value);\n        assert( Object.is( dataView.getUint16(0), float16bits ) );\n\n        setFloat16(dataView, 0, value, true);\n        assert( Object.is( dataView.getUint16(0, true), float16bits ) );\n      }\n    });\n\n    it(\"work with DataView from anothor realm\", () => {\n      assert.doesNotThrow(() => setFloat16(new AnotherRealmDataView(buffer), 0, 0));\n    });\n\n  });\n\n});\n"
  ]
}