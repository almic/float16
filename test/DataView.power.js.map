{
  "version": 3,
  "sources": [
    "test/DataView.js"
  ],
  "names": [
    "_PowerAssertRecorder1",
    "PowerAssertRecorder",
    "captured",
    "prototype",
    "_capt",
    "value",
    "espath",
    "push",
    "_expr",
    "source",
    "capturedValues",
    "powerAssertContext",
    "events",
    "describe",
    "data",
    "NaN",
    "Infinity",
    "buffer",
    "ArrayBuffer",
    "dataView",
    "DataView",
    "clear",
    "Uint16Array",
    "AnotherRealmDataView",
    "before",
    "window",
    "iframe",
    "document",
    "getElementById",
    "contentDocument",
    "readyState",
    "Promise",
    "resolve",
    "addEventListener",
    "once",
    "contentWindow",
    "global",
    "require",
    "runInNewContext",
    "Error",
    "beforeEach",
    "it",
    "_rec1",
    "assert",
    "getFloat16",
    "name",
    "content",
    "filepath",
    "line",
    "_rec2",
    "length",
    "doesNotThrow",
    "throws",
    "TypeError",
    "_rec3",
    "_rec4",
    "float16bits",
    "setUint16",
    "Object",
    "is",
    "_rec5",
    "_rec6",
    "Number",
    "isNaN",
    "original",
    "Array",
    "Symbol",
    "iterator",
    "call",
    "_rec7",
    "setFloat16",
    "_rec8",
    "_rec9",
    "_rec10",
    "getUint16"
  ],
  "mappings": "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",
  "sourceRoot": "./",
  "sourcesContent": [
    "describe(\"additional DataView methods\", () => {\n  const data = [\n    [0b0000000000000000, 0],\n    [0b1000000000000000, -0],\n    [0b0011110000000000, 1],\n    [0b1011110000000000, -1],\n    [0b0100001001001000, 3.140625],\n    [0b0000001000000000, 0.000030517578125],\n    [0b0111101111111111, 65504],\n    [0b1111101111111111, -65504],\n    [0b0000000000000001, 2 ** -24],\n    [0b1000000000000001, -(2 ** -24)],\n    [0b0111111000000000, NaN],\n    [0b0111110000000000, Infinity],\n    [0b1111110000000000, -Infinity],\n  ];\n\n  const buffer = new ArrayBuffer(2);\n  const dataView = new DataView(buffer);\n\n  function clear() {\n    new Uint16Array(buffer)[0] = 0;\n  }\n\n  /** @type {DataViewConstructor} */\n  let AnotherRealmDataView;\n\n  before(async function () {\n    if (typeof window !== \"undefined\") {\n      const iframe = document.getElementById(\"realm\");\n      if (iframe.contentDocument.readyState !== \"complete\") {\n        await new Promise((resolve) => {\n          iframe.addEventListener(\"load\", () => {\n            resolve();\n          }, { once: true });\n        });\n      }\n      AnotherRealmDataView = iframe.contentWindow.DataView;\n    } else if (\n      typeof global !== \"undefined\" && typeof require !== \"undefined\"\n    ) {\n      AnotherRealmDataView = require(\"vm\").runInNewContext(\"DataView\");\n    } else {\n      throw new Error(\"Unexpected environment\");\n    }\n  });\n\n  describe(\"getFloat16()\", () => {\n    beforeEach(clear);\n\n    it(\"property `name` is 'getFloat16'\", () => {\n      assert(getFloat16.name === \"getFloat16\");\n    });\n\n    it(\"property `length` is 2\", () => {\n      assert(getFloat16.length === 2);\n    });\n\n    it(\"first argument must be DataView instance\", () => {\n      assert.doesNotThrow(() => getFloat16(dataView, 0));\n\n      assert.throws(() => getFloat16(null, 0), TypeError);\n      assert.throws(() => getFloat16(3.14, 0), TypeError);\n      assert.throws(() => getFloat16(\"test\", 0), TypeError);\n      assert.throws(() => getFloat16({}, 0), TypeError);\n      assert.throws(() => getFloat16([], 0), TypeError);\n      assert.throws(() => getFloat16(() => {}, 0), TypeError);\n    });\n\n    it(\"get values\", () => {\n      for (const [float16bits, value] of data) {\n        dataView.setUint16(0, float16bits);\n        assert(Object.is(getFloat16(dataView, 0), value));\n\n        dataView.setUint16(0, float16bits, true);\n        assert(Object.is(getFloat16(dataView, 0, true), value));\n      }\n    });\n\n    it(\"get another NaN\", () => {\n      const float16bits = 0b1111111000000000;\n\n      dataView.setUint16(0, float16bits);\n      assert(Number.isNaN(getFloat16(dataView, 0)));\n\n      dataView.setUint16(0, float16bits, true);\n      assert(Number.isNaN(getFloat16(dataView, 0, true)));\n    });\n\n    it(\"work with DataView from anothor realm\", () => {\n      assert.doesNotThrow(() =>\n        getFloat16(new AnotherRealmDataView(buffer), 0)\n      );\n    });\n\n    it(\"check modified Array.prototype [@@iterator]\", () => {\n      const original = Array.prototype[Symbol.iterator];\n\n      try {\n        Array.prototype[Symbol.iterator] = function () {\n          return original.call(this);\n        };\n\n        assert.doesNotThrow(() => getFloat16(dataView, 0));\n      } finally {\n        Array.prototype[Symbol.iterator] = original;\n      }\n    });\n  });\n\n  describe(\"setFloat16()\", () => {\n    beforeEach(clear);\n\n    it(\"property `name` is 'setFloat16'\", () => {\n      assert(setFloat16.name === \"setFloat16\");\n    });\n\n    it(\"property `length` is 3\", () => {\n      assert(setFloat16.length === 3);\n    });\n\n    it(\"first argument must be DataView instance\", () => {\n      assert.doesNotThrow(() => setFloat16(dataView, 0, 0));\n\n      assert.throws(() => setFloat16(null, 0, 0), TypeError);\n      assert.throws(() => setFloat16(3.14, 0, 0), TypeError);\n      assert.throws(() => setFloat16(\"test\", 0, 0), TypeError);\n      assert.throws(() => setFloat16({}, 0, 0), TypeError);\n      assert.throws(() => setFloat16([], 0, 0), TypeError);\n      assert.throws(() => setFloat16(() => {}, 0, 0), TypeError);\n    });\n\n    it(\"set values\", () => {\n      for (const [float16bits, value] of data) {\n        setFloat16(dataView, 0, value);\n        assert(Object.is(dataView.getUint16(0), float16bits));\n\n        setFloat16(dataView, 0, value, true);\n        assert(Object.is(dataView.getUint16(0, true), float16bits));\n      }\n    });\n\n    it(\"work with DataView from anothor realm\", () => {\n      assert.doesNotThrow(() =>\n        setFloat16(new AnotherRealmDataView(buffer), 0, 0)\n      );\n    });\n\n    it(\"check modified Array.prototype [@@iterator]\", () => {\n      const original = Array.prototype[Symbol.iterator];\n\n      try {\n        Array.prototype[Symbol.iterator] = function () {\n          return original.call(this);\n        };\n\n        assert.doesNotThrow(() => setFloat16(dataView, 0, 0));\n      } finally {\n        Array.prototype[Symbol.iterator] = original;\n      }\n    });\n  });\n});\n"
  ]
}