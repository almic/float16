{
  "version": 3,
  "sources": [
    "test/f16round.js"
  ],
  "names": [
    "_PowerAssertRecorder1",
    "PowerAssertRecorder",
    "captured",
    "prototype",
    "_capt",
    "value",
    "espath",
    "push",
    "_expr",
    "source",
    "capturedValues",
    "powerAssertContext",
    "events",
    "describe",
    "maxFloat16",
    "minFloat16",
    "it",
    "_rec1",
    "assert",
    "f16round",
    "name",
    "content",
    "filepath",
    "line",
    "_rec2",
    "length",
    "_rec3",
    "_rec4",
    "_rec5",
    "Number",
    "isNaN",
    "undefined",
    "NaN",
    "_rec6",
    "_rec7",
    "Object",
    "is",
    "_rec8",
    "_rec9",
    "_rec10",
    "Infinity",
    "_rec11",
    "_rec12",
    "MAX_VALUE",
    "_rec13",
    "_rec14",
    "MIN_VALUE",
    "_rec15",
    "_rec16",
    "_rec17",
    "_rec18",
    "_rec19",
    "_rec20",
    "_rec21",
    "_rec22",
    "_rec23",
    "_rec24",
    "throws",
    "BigInt",
    "TypeError"
  ],
  "mappings": "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",
  "sourceRoot": "./",
  "sourcesContent": [
    "describe(\"f16round()\", () => {\n  const maxFloat16 = 65504;\n  const minFloat16 = 2 ** -24;\n\n  it(\"property `name` is 'f16round'\", () => {\n    assert(f16round.name === \"f16round\");\n  });\n\n  it(\"property `length` is 1\", () => {\n    assert(f16round.length === 1);\n  });\n\n  it(\"return NaN when value is empty or undefined or NaN\", () => {\n    assert(Number.isNaN(f16round()));\n    assert(Number.isNaN(f16round(undefined)));\n    assert(Number.isNaN(f16round(NaN)));\n  });\n\n  it(\"return 0 when value is 0 or null\", () => {\n    assert(Object.is(f16round(0), 0));\n    assert(Object.is(f16round(null), 0));\n  });\n\n  it(\"return -0 when value is -0\", () => {\n    assert(Object.is(f16round(-0), -0));\n  });\n\n  it(\"return ±Infinity when value is ±Infinity\", () => {\n    assert(f16round(Infinity) === Infinity);\n    assert(f16round(-Infinity) === -Infinity);\n  });\n\n  it(\"return ±Infinity when value is ±Number.MAX_VALUE\", () => {\n    assert(f16round(Number.MAX_VALUE) === Infinity);\n    assert(f16round(-Number.MAX_VALUE) === -Infinity);\n  });\n\n  it(\"return ±0 when value is ±Number.MIN_VALUE\", () => {\n    assert(Object.is(f16round(Number.MIN_VALUE), 0));\n    assert(Object.is(f16round(-Number.MIN_VALUE), -0));\n  });\n\n  it(\"return same value when value is ±float16 max/min value\", () => {\n    assert(f16round(maxFloat16) === maxFloat16);\n    assert(f16round(-maxFloat16) === -maxFloat16);\n    assert(f16round(minFloat16) === minFloat16);\n    assert(f16round(-minFloat16) === -minFloat16);\n  });\n\n  it(\"return 0 when value is ±float16 min value / 2\", () => {\n    assert(Object.is(f16round(minFloat16 / 2), 0));\n    assert(Object.is(f16round(-minFloat16 / 2), -0));\n  });\n\n  it(\"return ±float16 min value when value is ±float16 min value / 2 ± a bit number\", () => {\n    assert(f16round(2.980232238769531911744490042422139897126953655970282852649688720703125e-8) === minFloat16);\n    assert(f16round(-2.980232238769531911744490042422139897126953655970282852649688720703125e-8) === -minFloat16);\n  });\n\n  it(\"round finite values properly\", () => {\n    assert(f16round(0.499994) === 0.5);\n    assert(f16round(1.337) === 1.3369140625);\n  });\n\n  it(\"throw TypeError when value is bigint\", function () {\n    assert.throws(() => {\n      f16round(BigInt(0));\n    }, TypeError);\n  });\n});\n"
  ]
}